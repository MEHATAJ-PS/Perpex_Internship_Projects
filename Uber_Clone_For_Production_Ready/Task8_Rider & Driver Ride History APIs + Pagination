# rides/models.py
from django.db import models
from riders.models import Rider, Driver

class Ride(models.Model):
    STATUS_REQUESTED = "REQUESTED"
    STATUS_ONGOING = "ONGOING"
    STATUS_COMPLETED = "COMPLETED"
    STATUS_CANCELLED = "CANCELLED"

    STATUS_CHOICES = [
        (STATUS_REQUESTED, "Requested"),
        (STATUS_ONGOING, "Ongoing"),
        (STATUS_COMPLETED, "Completed"),
        (STATUS_CANCELLED, "Cancelled"),
    ]

    rider = models.ForeignKey(Rider, related_name="rides", on_delete=models.CASCADE)
    driver = models.ForeignKey(Driver, related_name="assigned_rides", on_delete=models.SET_NULL, null=True, blank=True)
    pickup_address = models.CharField(max_length=255)
    dropoff_address = models.CharField(max_length=255)
    pickup_lat = models.FloatField()
    pickup_lng = models.FloatField()
    drop_lat = models.FloatField()
    drop_lng = models.FloatField()
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default=STATUS_REQUESTED)
    requested_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Ride {self.id} - {self.status}"


# rides/serializers.py
from rest_framework import serializers
from .models import Ride

class RideHistorySerializer(serializers.ModelSerializer):
    pickup = serializers.CharField(source='pickup_address', read_only=True)
    drop = serializers.CharField(source='dropoff_address', read_only=True)
    driver = serializers.SerializerMethodField()
    rider = serializers.SerializerMethodField()

    class Meta:
        model = Ride
        fields = [
            "id",
            "pickup",
            "drop",
            "status",
            "requested_at",
            "updated_at",
            "driver",
            "rider",
        ]

    def get_driver(self, obj):
        if obj.driver and obj.driver.user:
            return obj.driver.user.username
        return None

    def get_rider(self, obj):
        if obj.rider and obj.rider.user:
            return obj.rider.user.username
        return None


# rides/views.py
from rest_framework.generics import ListAPIView
from rest_framework.permissions import IsAuthenticated
from rest_framework.pagination import PageNumberPagination
from .models import Ride
from .serializers import RideHistorySerializer
from riders.models import Rider, Driver

class RideHistoryPagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = "page_size"
    max_page_size = 50

def get_rider_profile(user):
    try:
        return user.rider_profile
    except Rider.DoesNotExist:
        return None

def get_driver_profile(user):
    try:
        return user.driver_profile
    except Driver.DoesNotExist:
        return None

class RiderRideHistoryView(ListAPIView):
    serializer_class = RideHistorySerializer
    permission_classes = [IsAuthenticated]
    pagination_class = RideHistoryPagination

    def get_queryset(self):
        rider = get_rider_profile(self.request.user)
        if not rider:
            return Ride.objects.none()
        return Ride.objects.filter(
            rider=rider,
            status__in=[Ride.STATUS_COMPLETED, Ride.STATUS_CANCELLED]
        ).order_by("-requested_at")

class DriverRideHistoryView(ListAPIView):
    serializer_class = RideHistorySerializer
    permission_classes = [IsAuthenticated]
    pagination_class = RideHistoryPagination

    def get_queryset(self):
        driver = get_driver_profile(self.request.user)
        if not driver:
            return Ride.objects.none()
        return Ride.objects.filter(
            driver=driver,
            status__in=[Ride.STATUS_COMPLETED, Ride.STATUS_CANCELLED]
        ).order_by("-requested_at")


# rides/urls.py
from django.urls import path
from .views import RiderRideHistoryView, DriverRideHistoryView

urlpatterns = [
    path("rider/history/", RiderRideHistoryView.as_view(), name="rider-ride-history"),
    path("driver/history/", DriverRideHistoryView.as_view(), name="driver-ride-history"),
]


# settings.py (add this snippet if not already configured)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}
